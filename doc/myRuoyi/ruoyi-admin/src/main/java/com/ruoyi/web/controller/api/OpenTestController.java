package com.ruoyi.web.controller.api;

import cn.hutool.core.lang.Snowflake;
import cn.hutool.core.util.IdUtil;
import com.ruoyi.business.bean.SysTest;
import com.ruoyi.business.service.SysTestServiceI;
import com.ruoyi.business.service.impl.TestServiceImpl;
import com.ruoyi.common.utils.IdUtils;
import com.ruoyi.framework.web.base.BaseController;
import com.ruoyi.system.domain.SysUser;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.async.WebAsyncTask;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.Date;
import java.util.concurrent.Callable;

@RestController
@RequestMapping("/open/test")
@Api(value="Open测试接口", description="开放API测试接口")
public class OpenTestController extends BaseController {
    @Autowired
    TestServiceImpl testService;
    @Autowired
    SysTestServiceI sysTestServiceI;
    @Autowired
    @Qualifier("taskExecutor")
    private ThreadPoolTaskExecutor taskExecutor;

    @GetMapping(value = "/test")
    @ApiOperation(value="测试Callable", notes="测试 Callable; Callable类型 swagger 不能使用try,故实际开发建议使用 WebAsyncTask ,后者也是要强大的多")
    public Callable test(){
        System.out.println(new Date());
        return ()->{
            return success(IdUtils.getSysId());
        };
    }
    @PostMapping(value = "/test2")
    @ApiOperation(value="测试WebAsyncTask", notes="测试WebAsyncTask")
    public WebAsyncTask test2(HttpServletRequest request){
        // 打印处理线程名
        System.out.println(String.format("请求处理线程：%s", Thread.currentThread().getName()));

        // 模拟开启一个异步任务，超时时间为10s
        String TIME_MESSAGE = "ok";
        WebAsyncTask<String> asyncTask = new WebAsyncTask<>(10 * 1000L,taskExecutor, () -> {
            System.out.println(String.format("异步工作线程：%s", Thread.currentThread().getName()));
            // 任务处理时间5s，不超时
            ArrayList<SysTest> objects = new ArrayList<>();
            Snowflake snowflake = IdUtil.createSnowflake(1, 1);
            for (int i = 0; i <5 ; i++) {
                long l = snowflake.nextId();
                SysTest sysTest = new SysTest("" + i, "real" + i);
                sysTest.setId(l+"");
                objects.add(sysTest);
            }
            sysTestServiceI.saveBatch(objects);
            objects.forEach(System.out::println);
            return TIME_MESSAGE;
        });

        // 任务执行完成时调用该方法
        asyncTask.onCompletion(() -> System.out.println("任务执行完成"));
        asyncTask.onTimeout(() -> {
            System.out.println("任务执行超时");
            return TIME_MESSAGE;
        });

        System.out.println("继续处理其他事情");
        return asyncTask;
    }
    @PostMapping(value = "/test3")
    @ApiOperation(value="测试body", notes="测试body")
    public WebAsyncTask test3(HttpServletRequest request,@RequestBody String bodyData){
        WebAsyncTask test2 = new WebAsyncTask( () -> {
            String test = request.getParameter("test");
            System.out.println("dddddddddd");
            return bodyData;
        });
        return test2;
    }
    @PostMapping(value = "/test4")
    @ApiOperation(value="测试beanBody", notes="测试beanBody")
    public WebAsyncTask test4(HttpServletRequest request,@RequestBody SysUser SysUser){
        WebAsyncTask test2 = new WebAsyncTask( () -> {
            return SysUser;
        });
        return test2;
    }
    @PostMapping(value = "/test5")
    @ApiOperation(value="测试bean", notes="测试bean")
    public WebAsyncTask test5(HttpServletRequest request, SysUser SysUser){
        WebAsyncTask test2 = new WebAsyncTask( () -> {
            return SysUser;
        });
        return test2;
    }

}