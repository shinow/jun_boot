package ${package}.controller;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import ${package}.models.${className};
import ${package}.services.${className}Service;
import io.nutz.nutzsite.common.base.Result;
import org.nutz.dao.Cnd;
import org.nutz.ioc.loader.annotation.Inject;
import org.nutz.ioc.loader.annotation.IocBean;
import org.nutz.lang.Strings;
import org.nutz.log.Log;
import org.nutz.log.Logs;
import org.nutz.mvc.annotation.At;
import org.nutz.mvc.annotation.Ok;
import org.nutz.mvc.annotation.POST;
import org.nutz.mvc.annotation.Param;
import org.nutz.plugins.slog.annotation.Slog;
import io.nutz.nutzsite.common.utils.ShiroUtils;
import javax.servlet.http.HttpServletRequest;
import java.util.List;
import java.util.Map;
import java.util.Date;
/**
 * ${tableComment} 信息操作处理
 * 
 * @author ${author}
 * @date ${datetime}
 */
@IocBean
@At("/${moduleName}/${classname}")
public class ${className}Controller {
	private static final Log log = Logs.get();

	@Inject
	private ${className}Service ${classname}Service;
	
	@RequiresPermissions("${moduleName}:${classname}:view")
	@At("")
	@Ok("th:/${moduleName}/${classname}/${classname}.html")
	public void index(HttpServletRequest req) {

	}

	/**
	 * 查询${tableComment}列表
	 */
	@At
	@Ok("json")
	@RequiresPermissions("${moduleName}:${classname}:list")
	public Object list(@Param("name") String name,
					   @Param("beginTime") Date beginTime,
					   @Param("endTime") Date endTime,
					   HttpServletRequest req) {
		Cnd cnd = Cnd.NEW();
		if (!Strings.isBlank(name)){
			//cnd.and("name", "like", "%" + name +"%");
		}
		if(Lang.isNotEmpty(beginTime)){
			cnd.and("create_time",">=", beginTime);
		}
		if(Lang.isNotEmpty(endTime)){
			cnd.and("create_time","<=", endTime);
		}
		return ${classname}Service.query(cnd);
	}

	/**
	 * 新增${tableComment}
	 */
	@At({"/add/?","/add"})
	@Ok("th:/${moduleName}/${classname}/add.html")
	public void add(@Param("id") String id, HttpServletRequest req) {
		${className} ${classname} = null;
		if(Strings.isNotBlank(id)) {
			${classname} = ${classname}Service.fetch(id);
			${classname}.setParentName(${classname}.getName());
		}
		if (${classname} ==null)  {
			${classname}=new ${className}();
			${classname}.setParentId("0");
			${classname}.setName("无");
		}
		req.setAttribute("${classname}",${classname});
	}

	/**
	 * 新增保存${tableComment}
	 */

	@At
	@POST
	@Ok("json")
	@RequiresPermissions("${moduleName}:${classname}:add")
	@Slog(tag="${tableComment}", after="新增保存${tableComment} id=$args$primaryKey.columnName}")
	public Object addDo(@Param("..") ${className} ${classname},HttpServletRequest req) {
		try {
			${classname}Service.insert(${classname});
			return Result.success("system.success");
		} catch (Exception e) {
			return Result.error("system.error");
		}
	}

	/**
	 * 修改${tableComment}
	 */
	@At("/edit/?")
	@Ok("th:/${moduleName}/${classname}/edit.html")
	public void edit(String id, HttpServletRequest req) {
		${className} ${classname} = ${classname}Service.fetch(id);
		if(${classname}!=null){
			${className} parentData = ${classname}Service.fetch(${classname}.getParentId());
			if (parentData != null) {
				${classname}.setParentName( parentData.getName());
			}
		}
		req.setAttribute("${classname}",${classname});
	}

	/**
	 * 修改保存${tableComment}
	 */
	@At
	@POST
	@Ok("json")
	@RequiresPermissions("${moduleName}:${classname}:edit")
	@Slog(tag="${tableComment}", after="修改保存${tableComment}")
	public Object editDo(@Param("..") ${className} ${classname},HttpServletRequest req) {
		try {
			if(Lang.isNotEmpty(${classname})){
				${classname}.setUpdateBy(ShiroUtils.getSysUserId());
				${classname}.setUpdateTime(new Date());
				${classname}Service.update(${classname});
			}
			return Result.success("system.success");
		} catch (Exception e) {
			return Result.error("system.error");
		}
	}

	/**
	 * 删除${tableComment}
	 */
	@At("/remove/?")
	@Ok("json")
	@RequiresPermissions("${moduleName}:${classname}:remove")
	@Slog(tag ="${tableComment}", after= "删除${tableComment}:${args[0]}")
	public Object remove(String id, HttpServletRequest req) {
		try {
			${classname}Service.delete(id);
			return Result.success("system.success");
		} catch (Exception e) {
			return Result.error("system.error");
		}
	}

	/**
	 * 选择菜单树
	 */
	@At("/selectTree/?")
	@Ok("th:/${moduleName}/${classname}/tree.html")
	public void selectTree(String id, HttpServletRequest req) {
        ${className} ${classname} = null;
        if(Strings.isNotBlank(id)) {
            ${classname} = ${classname}Service.fetch(id);
        }
        if (${classname} ==null)  {
            ${classname}=new ${className}();
            ${classname}.setId("");
            ${classname}.setParentId("0");
            ${classname}.setName("无");
        }
        req.setAttribute("${classname}",${classname});
	}

	/**
	* 获取树数据
	* @param parentId
	* @param name
	* @return
	*/
	@At
	@Ok("json")
	public List<Map<String, Object>> treeData( @Param("parentId") String parentId,
											   @Param("name") String name) {
		List<Map<String, Object>> tree = ${classname}Service.selectTree(parentId,name);
		return tree;
	}
}
