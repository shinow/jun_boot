package ${plugin.package};

import javax.sql.DataSource;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.mapper.MapperFactoryBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.core.io.support.ResourcePatternResolver;
import org.springframework.core.io.support.ResourcePatternUtils;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.stereotype.Component;
import org.springframework.transaction.PlatformTransactionManager;
#foreach ($table in $plugin.tables) 
import $table.qualifiedDAOClassName;
#end
/**
 *
#parse("description-java.vm")
 */
@Component
public class MiddlegenDalBean {

	@Bean
	public PlatformTransactionManager transactionManager(DataSource datasource) {
		return new DataSourceTransactionManager(datasource);
	}

	@Bean
	public SqlSessionFactory sqlSessionFactory(DataSource datasource, ResourceLoader resourceLoader) throws Exception {
		SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
		factoryBean.setDataSource(datasource);
		ResourcePatternResolver rpr = ResourcePatternUtils.getResourcePatternResolver(resourceLoader);
		Resource[] configResource = rpr.getResources("classpath*:mybatis/sqlMapConfig.xml");
		if (ArrayUtils.isNotEmpty(configResource)) {
			factoryBean.setConfigLocation(configResource[0]);
		}
		Resource[] mapperResource = rpr.getResources("classpath*:mybatis/mapping/*.xml");
		factoryBean.setMapperLocations(mapperResource);

		return factoryBean.getObject();
	}
	#foreach ($table in $plugin.tables)   
	
	@Bean
	@Autowired
	public ${table.DAOClassName} ${table.daoBeanName}(SqlSessionFactory sqlSessionFactory) throws Exception {
		MapperFactoryBean<${table.DAOClassName}> factoryBean = new MapperFactoryBean<${table.DAOClassName}>();
		factoryBean.setMapperInterface(${table.DAOClassName}.class);
		factoryBean.setSqlSessionFactory(sqlSessionFactory);
		return factoryBean.getObject();
	}#end
}
