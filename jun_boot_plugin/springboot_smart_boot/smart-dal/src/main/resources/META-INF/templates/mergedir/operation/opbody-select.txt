{
## check parameters
#if (${operation.paramType} == "object")
    	if (${operation.params.get(0).name} == null) {
    		throw new IllegalArgumentException("Can't select by a null data object.");
    	}

#end
## prepare parameters
#if (${operation.params.size()} == 0)
#set ($paramName = "null")

#elseif (${operation.params.size()} == 1)
#if (${operation.param.javaTypePrimitive})
        ${operation.param.simpleJavaTypeForPrimitive} param = new ${operation.param.simpleJavaTypeForPrimitive}(${operation.param.name});
#set ($paramName = "param")
#elseif (${operation.parameterClass} == "map")
	    Map param = new HashMap();

		#foreach ($param in ${operation.params})
			#if ($param.javaTypeForPrimitive)
        param.put("${param.name}", new ${param.simpleJavaTypeForPrimitive}(${param.name}));
			#else
        param.put("${param.name}", ${param.name});
			#end
		#end
		#set ($paramName = "param")
#else
#set ($paramName = ${operation.param.name})

#end
#else
        Map param = new HashMap();

#foreach ($param in ${operation.params})
#if ($param.javaTypeForPrimitive)
        param.put("${param.name}", new ${param.simpleJavaTypeForPrimitive}(${param.name}));
#else
        param.put("${param.name}", ${param.name});
#end
#end
#set ($paramName = "param")

#end
## execute query and return

#if (${operation.multiplicity} == "one")
#if (${operation.returnTypePrimitive})
	    ${operation.simpleReturnTypeForPrimitive} retObj = (${operation.simpleReturnTypeForPrimitive}) super.object(namespace+"${operation.mappedStatementId}", ${paramName});

		if (retObj == null) {
		    return ${operation.defaultReturnValue};
		} else {
		    return retObj.${operation.simpleReturnType}Value();
		}
#else
        return (${operation.simpleReturnType}) super.object(namespace+"${operation.mappedStatementId}", ${paramName});
#end
#else
        return (${operation.simpleReturnType}) super.list(namespace+"${operation.mappedStatementId}", ${paramName});
#end

    }